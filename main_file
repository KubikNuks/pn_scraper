import requests  # For making HTTP requests
from bs4 import BeautifulSoup  # For parsing HTML
import logging  # For logging events and errors
from typing import List  # For type hinting
import subprocess  # For running shell commands
from tqdm import tqdm  # For displaying progress bars
import os  # For interacting with the operating system
from flask import Flask, request, render_template, redirect, url_for  # For creating the web application
from concurrent.futures import ThreadPoolExecutor  # For running tasks in parallel

# Initialize Flask app
app = Flask(__name__)

# Set up logging configuration
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Define headers to mimic a real web browser when making HTTP requests
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',  # User agent string to identify the client
    'Accept-Language': 'en-US,en;q=0.5',  # Language preferences
}

# Function to get video links from the given URL
def get_video_links(base_url: str, class_attr: str) -> List[dict]:
    video_data = []  # List to store video information
    try:
        logging.info(f"Sending GET request to URL: {base_url}")
        response = requests.get(base_url, headers=HEADERS)  # Make HTTP GET request
        response.raise_for_status()  # Raise exception for HTTP errors
        logging.info("Successfully received response from the server.")
        
        soup = BeautifulSoup(response.content, 'html.parser')  # Parse HTML content
        video_divs = soup.find_all('a', {'class': class_attr})  # Find all 'a' tags with the specified class attribute
        
        if not video_divs:
            logging.warning("No video links found on the page.")
            return video_data  # Return empty list if no videos found
        
        for div in video_divs:
            url = "https://www.pornhub.com" + div.get('href')  # Construct full URL
            title = div.get('title')  # Get the title of the video
            thumbnail = div.find('img').get('src') if div.find('img') else None  # Get thumbnail if available
            video_data.append({'url': url, 'title': title, 'thumbnail': thumbnail})  # Add video data to the list
        
        logging.info(f"Found {len(video_data)} video links with metadata.")
    except requests.RequestException as e:
        logging.error(f"Request failed: {e}")
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}")
    return video_data  # Return the list of video data

# Function to extract video URLs from the list of video divs
def extract_video_urls(video_divs) -> List[str]:
    base_url = "https://www.pornhub.com"
    video_urls = [
        base_url + div.get('href')
        for div in video_divs if div.get('href') and div.get('href').startswith('/view_video.php?viewkey=')
    ]
    return video_urls  # Return the list of video URLs

# Function to download a video using yt-dlp
def download_video(video: dict, output_dir: str):
    try:
        link = video['url']  # Get the URL of the video
        title = video['title']  # Get the title of the video
        command = ['yt-dlp', '--extract-audio', '--audio-format', 'mp3', '-o', os.path.join(output_dir, f'{title}.%(ext)s'), link]
        subprocess.run(command, check=True)  # Run the command to download the video and extract audio
        logging.info(f"Successfully downloaded {link}")
    except subprocess.CalledProcessError as e:
        logging.error(f"Error downloading {link}: {e}")

# Route for the main page of the web app
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        base_url = request.form['base_url']  # Get the base URL from the form
        class_attr = request.form['class_attr']  # Get the class attribute from the form
        output_dir = request.form['output_dir']  # Get the output directory from the form
        
        if not base_url or not class_attr or not output_dir:
            logging.error("One or more required fields are missing.")
            return render_template('index.html', error="All fields are required.")
        
        video_data = get_video_links(base_url, class_attr)  # Get video links and metadata
        
        os.makedirs(output_dir, exist_ok=True)  # Create output directory if it doesn't exist
        
        with ThreadPoolExecutor(max_workers=4) as executor:
            list(tqdm(executor.map(lambda video: download_video(video, output_dir), video_data), total=len(video_data), desc='Downloading'))
        
        return render_template('index.html', videos=video_data)
    
    return render_template('index.html')

# Main entry point of the application
if __name__ == '__main__':
    app.run(debug=True)  # Run the Flask app in debug mode
